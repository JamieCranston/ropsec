% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sign-commits.R
\name{gh_store_key}
\alias{gh_store_key}
\title{Add a public key to your GitHub account}
\usage{
gh_store_key(key, .token = NULL)
}
\arguments{
\item{key}{A character string containing the ID of a key to use. See
\code{\link[gpg:gpg_list_keys]{gpg::gpg_list_keys()}}; if you haven't created a key, see
\code{\link[=sign_commits_with_key]{sign_commits_with_key()}} or \code{\link[gpg:gpg_keygen]{gpg::gpg_keygen()}}.}

\item{.token}{GitHub Personal Access Token with at least \code{write:gpg_key}
scope enabled. You can grant access to tokens
\href{https://github.com/settings/tokens}{here}.}
}
\description{
\code{gh_store_key()} adds the public key associated with a key ID to your GitHub
account. If you have a GitHub Personal Access Token it will attempt to use
it; if it fails, it will print the public key for you to copy manually into
GitHub.
}
\details{
If you do not have a GitHub Personal Access Token setup or you want to store
your key on Gitlab or other service you can either call this function without
a token and then add the printed public key manually or call
\code{\link[gpg:gpg_export]{gpg::gpg_export()}} with \code{newkey} and add the returned public key manually.
See
https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/
for more information on tokens.
}
\examples{
\dontrun{
newkey <- sign_commits_with_key("John Doe", "johndoe@example.com")
# if you do not have personal access token for github
gh_store_key(newkey)
# if your GitHub Personal Access Token is stored in `.Renviron` as GITHUB_PAT
gh_store_key(newkey, Sys.getenv('GITHUB_PAT'))
}
}
